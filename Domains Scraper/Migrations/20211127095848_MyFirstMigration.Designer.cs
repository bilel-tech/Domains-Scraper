// <auto-generated />
using System;
using Domains_Scraper.Entity_Framework_folder;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domains_Scraper.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20211127095848_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domains_Scraper.Models.AllTimeOrganicData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AllTimeOrganicData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.BacklinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FormLinks")
                        .HasColumnType("int");

                    b.Property<int>("FrameLinks")
                        .HasColumnType("int");

                    b.Property<int>("ImageLinks")
                        .HasColumnType("int");

                    b.Property<int>("TextLinks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BacklinkType");
                });

            modelBuilder.Entity("Domains_Scraper.Models.FollowLinksVsNoFollowLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FollowLinks")
                        .HasColumnType("int");

                    b.Property<int>("NotFollowLinks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FollowLinksVsNoFollowLink");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OneYearOrganicData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OneYearOrganicData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicChartData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AllTimeOrganicDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ElevenToTwenty")
                        .HasColumnType("int");

                    b.Property<int>("FiftyOneToOneHundred")
                        .HasColumnType("int");

                    b.Property<int>("FourToTen")
                        .HasColumnType("int");

                    b.Property<int?>("OneYearOrganicDataId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganicDataId")
                        .HasColumnType("int");

                    b.Property<int>("TopThree")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("TwentyOneToFifty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllTimeOrganicDataId");

                    b.HasIndex("OneYearOrganicDataId");

                    b.HasIndex("OrganicDataId");

                    b.ToTable("OrganicChartData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AllTimeOrganicDataId")
                        .HasColumnType("int");

                    b.Property<int?>("OneYearOrganicDataId")
                        .HasColumnType("int");

                    b.Property<int>("OrganicKeywords")
                        .HasColumnType("int");

                    b.Property<int>("OrganicTraffic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllTimeOrganicDataId");

                    b.HasIndex("OneYearOrganicDataId");

                    b.ToTable("OrganicData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicTrafficAndKeywordsByCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<int>("KeyWordsValue")
                        .HasColumnType("int");

                    b.Property<int>("OranicTraficValue")
                        .HasColumnType("int");

                    b.Property<int?>("OrganicDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganicDataId");

                    b.ToTable("OrganicTrafficAndKeywordsByCountry");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicTrafficChartData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AllTimeOrganicDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OneYearOrganicDataId")
                        .HasColumnType("int");

                    b.Property<int>("OrganicTrafficValue")
                        .HasColumnType("int");

                    b.Property<int>("PaidTrafficValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllTimeOrganicDataId");

                    b.HasIndex("OneYearOrganicDataId");

                    b.ToTable("OrganicTrafficChartData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.SemrushDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorityScore")
                        .HasColumnType("int");

                    b.Property<int?>("BacklinkTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Backlinks")
                        .HasColumnType("int");

                    b.Property<int?>("FollowLinksVsNotFollowLinkId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganicDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BacklinkTypeId");

                    b.HasIndex("FollowLinksVsNotFollowLinkId");

                    b.HasIndex("OrganicDataId");

                    b.ToTable("SemrushDomain");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicChartData", b =>
                {
                    b.HasOne("Domains_Scraper.Models.AllTimeOrganicData", null)
                        .WithMany("AllTimeOrganicKeyWordsChartData")
                        .HasForeignKey("AllTimeOrganicDataId");

                    b.HasOne("Domains_Scraper.Models.OneYearOrganicData", null)
                        .WithMany("OneYearOrganicKeyWordsChartData")
                        .HasForeignKey("OneYearOrganicDataId");

                    b.HasOne("Domains_Scraper.Models.OrganicData", null)
                        .WithMany("OrganicPositionsDistrubution")
                        .HasForeignKey("OrganicDataId");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicData", b =>
                {
                    b.HasOne("Domains_Scraper.Models.AllTimeOrganicData", "AllTimeOrganicData")
                        .WithMany()
                        .HasForeignKey("AllTimeOrganicDataId");

                    b.HasOne("Domains_Scraper.Models.OneYearOrganicData", "OneYearOrganicData")
                        .WithMany()
                        .HasForeignKey("OneYearOrganicDataId");

                    b.Navigation("AllTimeOrganicData");

                    b.Navigation("OneYearOrganicData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicTrafficAndKeywordsByCountry", b =>
                {
                    b.HasOne("Domains_Scraper.Models.OrganicData", null)
                        .WithMany("OrganicTrafficAndKeywordsByCountry")
                        .HasForeignKey("OrganicDataId");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicTrafficChartData", b =>
                {
                    b.HasOne("Domains_Scraper.Models.AllTimeOrganicData", null)
                        .WithMany("AllTimeOrganicTrafficChartData")
                        .HasForeignKey("AllTimeOrganicDataId");

                    b.HasOne("Domains_Scraper.Models.OneYearOrganicData", null)
                        .WithMany("OneYearOrganicTrafficChartData")
                        .HasForeignKey("OneYearOrganicDataId");
                });

            modelBuilder.Entity("Domains_Scraper.Models.SemrushDomain", b =>
                {
                    b.HasOne("Domains_Scraper.Models.BacklinkType", "BacklinkType")
                        .WithMany()
                        .HasForeignKey("BacklinkTypeId");

                    b.HasOne("Domains_Scraper.Models.FollowLinksVsNoFollowLink", "FollowLinksVsNotFollowLink")
                        .WithMany()
                        .HasForeignKey("FollowLinksVsNotFollowLinkId");

                    b.HasOne("Domains_Scraper.Models.OrganicData", "OrganicData")
                        .WithMany()
                        .HasForeignKey("OrganicDataId");

                    b.Navigation("BacklinkType");

                    b.Navigation("FollowLinksVsNotFollowLink");

                    b.Navigation("OrganicData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.AllTimeOrganicData", b =>
                {
                    b.Navigation("AllTimeOrganicKeyWordsChartData");

                    b.Navigation("AllTimeOrganicTrafficChartData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OneYearOrganicData", b =>
                {
                    b.Navigation("OneYearOrganicKeyWordsChartData");

                    b.Navigation("OneYearOrganicTrafficChartData");
                });

            modelBuilder.Entity("Domains_Scraper.Models.OrganicData", b =>
                {
                    b.Navigation("OrganicPositionsDistrubution");

                    b.Navigation("OrganicTrafficAndKeywordsByCountry");
                });
#pragma warning restore 612, 618
        }
    }
}
